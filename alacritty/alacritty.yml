# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Setup term for programs to be able to use it
env:
  TERM: alacritty

window:
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Startup Mode (changes require restart)
  #startup_mode: Fullscreen

  decorations: buttonless

font:
  # Normal font face - Also used to draw glyphs on tmux & VIM
  normal:
    family: BitstreamVeraSansMono Nerd Font Mono
    style: Roman

  bold:
    family: BitstreamVeraSansMono Nerd Font Mono
    style: Bold

  italic:
    family: BitstreamVeraSansMono Nerd Font Mono
    style: Oblique

  bold_italic:
    family: BitstreamVeraSansMono Nerd Font Mono
    style: Bold Oblique

  # Font size
  size: 12.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing
  # I've given in 14 spacing which fits really well with my fonts, you may change it
  # to your convenience but make sure to adjust 'glyph_offset' appropriately post that
  offset:
   x: 0
   y: 0

  # Note: This requires RESTART
  # By default when you change the offset above you'll see an issue, where the texts are bottom
  # aligned with the cursor, this is to make sure they center align.
  # This offset should usually be 1/2 of the above offset-y being set.
  glyph_offset:
   x: 0
   # Keeping this as half of offset to vertically align the text in cursor
   y: 0

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

# Live config reload (changes require restart)
live_config_reload: true

# Colors (Gruvbox dark)
colors:
  # Default colors
  primary:
    # hard contrast: background = '#1d2021'
    background: '#282828'
    # soft contrast: background = '#32302f'
    foreground: '#ebdbb2'

  # Normal colors
  normal:
    black:   '#282828'
    red:     '#cc241d'
    green:   '#98971a'
    yellow:  '#d79921'
    blue:    '#458588'
    magenta: '#b16286'
    cyan:    '#689d6a'
    white:   '#a89984'

  # Bright colors
  bright:
    black:   '#928374'
    red:     '#fb4934'
    green:   '#b8bb26'
    yellow:  '#fabd2f'
    blue:    '#83a598'
    magenta: '#d3869b'
    cyan:    '#8ec07c'
    white:   '#ebdbb2'

# Setup some custom key bindings here - Best thing is you can setup key bindings
# using Mac's 'command' to control your tmux.
# Use `xxd -psd` to get the hex codes for various keys.
# A great reference: [https://arslan.io/2018/02/05/gpu-accelerated-terminal-alacritty/#make-alacritty-feel-like-iterm2]
# Other useful links for decoupling escape sequences, like how <C-i> and <Tab> are the same (^I).
#   [https://unix.stackexchange.com/questions/631241/mapping-otherwise-conflicting-or-unmappable-keys-in-terminal-vim]
#   [http://www.leonerd.org.uk/hacks/fixterms/]
#   [https://en.wikipedia.org/wiki/ASCII#Printable_characters # Use the DEC version]
key_bindings:
  # basic usage
  - { key: C,        mods: Command,       action: Copy         } # 
  - { key: V,        mods: Command,       action: Paste        } # 
  - { key: Q,        mods: Command,       action: Quit         } # 
  - { key: N,        mods: Command|Shift, action: SpawnNewInstance }

  # tmux
  - { key: LBracket, mods: Command,       chars: "\x06\x5b"    } # ctrl-f [ : Use command + [ to cycle through windows left
  - { key: RBracket, mods: Command,       chars: "\x06\x5d"    } # ctrl-f ] : Use command + ] to cycle through windows right
  - { key: Key6,     mods: Control,       chars: "\x1e"        } #          : ctrl-^ doesn't work in some terminals like alacritty
  - { key: D,        mods: Command,       chars: "\x06\x76"    } # ctrl-f v : Split pane vertically
  - { key: D,        mods: Command|Shift, chars: "\x06\x73"    } # ctrl-f s : Split pane horizontally
  - { key: W,        mods: Command,       chars: "\x06\x78"    } # ctrl-f x : Close pane; closes window if last pane
  - { key: T,        mods: Command,       chars: "\x06\x63"    } # ctrl-f c : Create window (tab)
  - { key: Key1,     mods: Command,       chars: "\x06\x31"    } # ctrl-f 1 : Select window 1
  - { key: Key2,     mods: Command,       chars: "\x06\x32"    } # ctrl-f 2 : Select window 2
  - { key: Key3,     mods: Command,       chars: "\x06\x33"    } # ctrl-f 3 : Select window 3
  - { key: Key4,     mods: Command,       chars: "\x06\x34"    } # ctrl-f 4 : Select window 4
  - { key: Key5,     mods: Command,       chars: "\x06\x35"    } # ctrl-f 5 : Select window 5
  - { key: Key6,     mods: Command,       chars: "\x06\x36"    } # ctrl-f 6 : Select window 6
  - { key: Key7,     mods: Command,       chars: "\x06\x37"    } # ctrl-f 7 : Select window 7
  - { key: Key8,     mods: Command,       chars: "\x06\x38"    } # ctrl-f 8 : Select window 8
  - { key: Key9,     mods: Command,       chars: "\x06\x39"    } # ctrl-f 9 : Select window 9
  - { key: Left,     mods: Command,       chars: "\x06\x4e"    } # ctrl-f n : Resize pane - Left
  - { key: Down,     mods: Command,       chars: "\x06\x45"    } # ctrl-f e : Resize pane - Down
  - { key: Up,       mods: Command,       chars: "\x06\x49"    } # ctrl-f i : Resize pane - Up
  - { key: Right,    mods: Command,       chars: "\x06\x4f"    } # ctrl-f o : Resize pane - Right

  # 5u - ctrl
  - { key: Tab,      mods: Control,       chars: "\x1b[9;5u"   } # ctrl-tab
  - { key: Comma,    mods: Control,       chars: "\x1b[44;5u"  } # ctrl-,
  - { key: Minus,    mods: Control,       chars: "\x1b[45;5u"  } # ctrl--
  - { key: Period,   mods: Control,       chars: "\x1b[46;5u"  } # ctrl-.
  - { key: Equals,   mods: Control,       chars: "\x1b[61;5u"  } # ctrl-=
  - { key: LBracket, mods: Control,       chars: "\x33[91;5u"  } # ctrl-[ - overlaps ESC
  - { key: RBracket, mods: Control,       chars: "\x1b[93;5u"  } # ctrl-]
  - { key: H,        mods: Control,       chars: "\x33[104;5u" } # ctrl-h - overlaps BS/Backspace
  - { key: I,        mods: Control,       chars: "\x33[105;5u" } # ctrl-i - overlaps TAB
  - { key: M,        mods: Control,       chars: "\x33[109;5u" } # ctrl-m - overlaps CR/Enter

  # 6u - shift-ctrl
  - { key: Tab,      mods: Control|Shift, chars: "\x1b[9;6u"   } # shift-ctrl-tab
  - { key: Comma,    mods: Control|Shift, chars: "\x1b[44;6u"  } # shift-ctrl-, OR ctrl-<
  - { key: Minus,    mods: Control|Shift, chars: "\x1b[45;6u"  } # shift-ctrl-- OR ctrl-_
  - { key: Period,   mods: Control|Shift, chars: "\x1b[46;6u"  } # shift-ctrl-. OR ctrl->
  - { key: Equals,   mods: Control|Shift, chars: "\x1b[61;6u"  } # shift-ctrl-= OR ctrl-+
  - { key: LBracket, mods: Control|Shift, chars: "\x1b[91;6u"  } # shift-ctrl-[ OR ctrl-{
  - { key: RBracket, mods: Control|Shift, chars: "\x1b[93;6u"  } # shift-ctrl-] OR ctrl-}
  - { key: A,        mods: Control|Shift, chars: "\x1b[97;6u"  } # shift-ctrl-a
  - { key: B,        mods: Control|Shift, chars: "\x1b[98;6u"  } # shift-ctrl-b
  - { key: C,        mods: Control|Shift, chars: "\x1b[99;6u"  } # shift-ctrl-c
  - { key: D,        mods: Control|Shift, chars: "\x1b[100;6u" } # shift-ctrl-d
  - { key: E,        mods: Control|Shift, chars: "\x1b[101;6u" } # shift-ctrl-e
  - { key: F,        mods: Control|Shift, chars: "\x1b[102;6u" } # shift-ctrl-f
  - { key: G,        mods: Control|Shift, chars: "\x1b[103;6u" } # shift-ctrl-g
  - { key: H,        mods: Control|Shift, chars: "\x1b[104;6u" } # shift-ctrl-h
  - { key: I,        mods: Control|Shift, chars: "\x1b[105;6u" } # shift-ctrl-i
  - { key: J,        mods: Control|Shift, chars: "\x1b[106;6u" } # shift-ctrl-j
  - { key: K,        mods: Control|Shift, chars: "\x1b[107;6u" } # shift-ctrl-k
  - { key: L,        mods: Control|Shift, chars: "\x1b[108;6u" } # shift-ctrl-l
  - { key: M,        mods: Control|Shift, chars: "\x1b[109;6u" } # shift-ctrl-m
  - { key: N,        mods: Control|Shift, chars: "\x1b[110;6u" } # shift-ctrl-n
  - { key: O,        mods: Control|Shift, chars: "\x1b[111;6u" } # shift-ctrl-o
  - { key: P,        mods: Control|Shift, chars: "\x1b[112;6u" } # shift-ctrl-p
  - { key: Q,        mods: Control|Shift, chars: "\x1b[113;6u" } # shift-ctrl-q
  - { key: R,        mods: Control|Shift, chars: "\x1b[114;6u" } # shift-ctrl-r
  - { key: S,        mods: Control|Shift, chars: "\x1b[115;6u" } # shift-ctrl-s
  - { key: T,        mods: Control|Shift, chars: "\x1b[116;6u" } # shift-ctrl-t
  - { key: U,        mods: Control|Shift, chars: "\x1b[117;6u" } # shift-ctrl-u
  - { key: V,        mods: Control|Shift, chars: "\x1b[118;6u" } # shift-ctrl-v
  - { key: W,        mods: Control|Shift, chars: "\x1b[119;6u" } # shift-ctrl-w
  - { key: X,        mods: Control|Shift, chars: "\x1b[120;6u" } # shift-ctrl-x
  - { key: Y,        mods: Control|Shift, chars: "\x1b[121;6u" } # shift-ctrl-y
  - { key: Z,        mods: Control|Shift, chars: "\x1b[122;6u" } # shift-ctrl-z

  # 9u - cmd
  # For some reason these are needed for cmd-e to be recognized by NVIM in tmux as <M-e>, for example
  - { key: E,        mods: Command,       chars: "\x06\x65" } # ctrl-f e
  - { key: I,        mods: Command,       chars: "\x06\x69" } # ctrl-f i
  - { key: N,        mods: Command,       chars: "\x06\x6e" } # ctrl-f n
  - { key: O,        mods: Command,       chars: "\x06\x6f" } # ctrl-f o
  # Actual bindings
  - { key: E,        mods: Command,       chars: "\x1b[101;9u" } # cmd-e
  - { key: I,        mods: Command,       chars: "\x1b[105;9u" } # cmd-i
  - { key: N,        mods: Command,       chars: "\x1b[110;9u" } # cmd-n
  - { key: O,        mods: Command,       chars: "\x1b[111;9u" } # cmd-o
