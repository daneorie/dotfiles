# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Setup term for programs to be able to use it
env:
  TERM: alacritty

window:
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Startup Mode (changes require restart)
  #startup_mode: Fullscreen

  decorations: buttonless

font:
  # Normal font face - Also used to draw glyphs on tmux & VIM
  normal:
    family: BitstreamVeraSansMono Nerd Font Mono
    style: Roman

  bold:
    family: BitstreamVeraSansMono Nerd Font Mono
    style: Bold

  italic:
    family: BitstreamVeraSansMono Nerd Font Mono
    style: Oblique

  bold_italic:
    family: BitstreamVeraSansMono Nerd Font Mono
    style: Bold Oblique

  # Font size
  size: 12.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing
  # I've given in 14 spacing which fits really well with my fonts, you may change it
  # to your convenience but make sure to adjust 'glyph_offset' appropriately post that
  offset:
   x: 0
   y: 0

  # Note: This requires RESTART
  # By default when you change the offset above you'll see an issue, where the texts are bottom
  # aligned with the cursor, this is to make sure they center align.
  # This offset should usually be 1/2 of the above offset-y being set.
  glyph_offset:
   x: 0
   # Keeping this as half of offset to vertically align the text in cursor
   y: 0

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

# Live config reload (changes require restart)
live_config_reload: true

# Colors (Gruvbox dark)
colors:
  # Default colors
  primary:
    # hard contrast: background = '#1d2021'
    background: '#282828'
    # soft contrast: background = '#32302f'
    foreground: '#ebdbb2'

  # Normal colors
  normal:
    black:   '#282828'
    red:     '#cc241d'
    green:   '#98971a'
    yellow:  '#d79921'
    blue:    '#458588'
    magenta: '#b16286'
    cyan:    '#689d6a'
    white:   '#a89984'

  # Bright colors
  bright:
    black:   '#928374'
    red:     '#fb4934'
    green:   '#b8bb26'
    yellow:  '#fabd2f'
    blue:    '#83a598'
    magenta: '#d3869b'
    cyan:    '#8ec07c'
    white:   '#ebdbb2'

# Setup some custom key bindings here - Best thing is you can setup key bindings
# using Mac's 'command' to control your tmux.
# Use `xxd -psd` to get the hex codes for various keys.
# A great reference: [https://arslan.io/2018/02/05/gpu-accelerated-terminal-alacritty/#make-alacritty-feel-like-iterm2]
# Other useful links for decoupling escape sequences, like how <C-i> and <Tab> are the same (^I).
#   [https://unix.stackexchange.com/questions/631241/mapping-otherwise-conflicting-or-unmappable-keys-in-terminal-vim]
#   [http://www.leonerd.org.uk/hacks/fixterms/]
#   [https://en.wikipedia.org/wiki/ASCII#Printable_characters # Use the DEC version]
key_bindings:
  - { key: C,        mods: Command,       action: Copy      } # 
  - { key: V,        mods: Command,       action: Paste     } # 
  - { key: Q,        mods: Command,       action: Quit      } # 
  - { key: N,        mods: Command|Shift, command: { program: "open", args: ["-nb", "org.alacritty"] } } # Open another instance of Alacritty
  - { key: LBracket, mods: Command,       chars: "\x06\x5b" } # ctrl-f [ : Use command + [ to cycle through windows left
  - { key: RBracket, mods: Command,       chars: "\x06\x5d" } # ctrl-f ] : Use command + ] to cycle through windows right
  - { key: Key6,     mods: Control,       chars: "\x1e"     } #          : ctrl-^ doesn't work in some terminals like alacritty
  - { key: D,        mods: Command,       chars: "\x06\x76" } # ctrl-f v : Split pane vertically
  - { key: D,        mods: Command|Shift, chars: "\x06\x73" } # ctrl-f s : Split pane horizontally
  - { key: W,        mods: Command,       chars: "\x06\x78" } # ctrl-f x : Close pane; closes window if last pane
  - { key: N,        mods: Command,       chars: "\x06\x6e" } # ctrl-f n : Select pane - Left
  - { key: E,        mods: Command,       chars: "\x06\x65" } # ctrl-f e : Select pane - Down
  - { key: I,        mods: Command,       chars: "\x06\x69" } # ctrl-f i : Select pane - Up
  - { key: O,        mods: Command,       chars: "\x06\x6f" } # ctrl-f o : Select pane - Right
  - { key: T,        mods: Command,       chars: "\x06\x63" } # ctrl-f c : Create window (tab)
  - { key: Key1,     mods: Command,       chars: "\x06\x31" } # ctrl-f 1 : Select window 1
  - { key: Key2,     mods: Command,       chars: "\x06\x32" } # ctrl-f 2 : Select window 2
  - { key: Key3,     mods: Command,       chars: "\x06\x33" } # ctrl-f 3 : Select window 3
  - { key: Key4,     mods: Command,       chars: "\x06\x34" } # ctrl-f 4 : Select window 4
  - { key: Key5,     mods: Command,       chars: "\x06\x35" } # ctrl-f 5 : Select window 5
  - { key: Key6,     mods: Command,       chars: "\x06\x36" } # ctrl-f 6 : Select window 6
  - { key: Key7,     mods: Command,       chars: "\x06\x37" } # ctrl-f 7 : Select window 7
  - { key: Key8,     mods: Command,       chars: "\x06\x38" } # ctrl-f 8 : Select window 8
  - { key: Key9,     mods: Command,       chars: "\x06\x39" } # ctrl-f 9 : Select window 9
  - { key: Left,     mods: Command,       chars: "\x06\x4e" } # ctrl-f n : Resize pane - Left
  - { key: Down,     mods: Command,       chars: "\x06\x45" } # ctrl-f e : Resize pane - Down
  - { key: Up,       mods: Command,       chars: "\x06\x49" } # ctrl-f i : Resize pane - Up
  - { key: Right,    mods: Command,       chars: "\x06\x4f" } # ctrl-f o : Resize pane - Right
  - { key: Tab,                           chars: "\x1b[9;u" } # Map tab to something
  - { key: Tab,      mods: Control,       chars: "\x1b[9;5u"   } # Map ctrl-tab to something
  - { key: Tab,      mods: Control|Shift, chars: "\x1b[9;6u"   } # Map shirt-ctrl-tab to something
  - { key: Minus,    mods: Control,       chars: "\x33[45;5u"  } # Map ctrl-- to something
  - { key: Equals,   mods: Control,       chars: "\x33[61;5u"  } # Map ctrl-= to something
  - { key: Minus,    mods: Control|Shift, chars: "\x33[45;6u"  } # Map ctrl-_ to something
  - { key: Equals,   mods: Control|Shift, chars: "\x33[61;6u"  } # Map ctrl-+ to something
  - { key: LBracket, mods: Control,       chars: "\x33[91;5u"  } # Map ctrl-[ to something
  - { key: RBracket, mods: Control,       chars: "\x33[93;5u"  } # Map ctrl-] to something
  - { key: LBracket, mods: Control|Shift, chars: "\x33[91;6u"  } # Map ctrl-{ to something
  - { key: RBracket, mods: Control|Shift, chars: "\x33[93;6u"  } # Map ctrl-} to something
  - { key: Comma,    mods: Control,       chars: "\x1b[44;5u"  } # Map ctrl-, to something
  - { key: Period,   mods: Control,       chars: "\x1b[46;5u"  } # Map ctrl-. to something
  - { key: Comma,    mods: Control|Shift, chars: "\x33[44;6u"  } # Map ctrl-< to something
  - { key: Period,   mods: Control|Shift, chars: "\x33[46;6u"  } # Map ctrl-> to something
  - { key: A,        mods: Control|Shift, chars: "\x1b[97;6u"  } # Map shift-ctrl-a to something
  - { key: B,        mods: Control|Shift, chars: "\x1b[98;6u"  } # Map shift-ctrl-b to something
  - { key: C,        mods: Control|Shift, chars: "\x1b[99;6u"  } # Map shift-ctrl-c to something
  - { key: D,        mods: Control|Shift, chars: "\x1b[100;6u" } # Map shift-ctrl-d to something
  - { key: E,        mods: Control|Shift, chars: "\x33[101;6u" } # Map shift-ctrl-e to something
  - { key: F,        mods: Control|Shift, chars: "\x1b[102;6u" } # Map shift-ctrl-f to something
  - { key: G,        mods: Control|Shift, chars: "\x1b[103;6u" } # Map shift-ctrl-g to something
  - { key: H,        mods: Control|Shift, chars: "\x1b[104;6u" } # Map shift-ctrl-h to something
  - { key: I,        mods: Control,       chars: "\x33[105;5u" } # Map ctrl-i to something else to differentiate it from <tab>
  - { key: I,        mods: Control|Shift, chars: "\x33[105;6u" } # Map shift-ctrl-i to something
  - { key: J,        mods: Control|Shift, chars: "\x1b[106;6u" } # Map shift-ctrl-j to something
  - { key: J,        mods: Control|Shift, chars: "\x1b[74;5u" } # Map shift-ctrl-j to something
  - { key: K,        mods: Control|Shift, chars: "\x1b[107;6u" } # Map shift-ctrl-k to something
  - { key: L,        mods: Control|Shift, chars: "\x1b[108;6u" } # Map shift-ctrl-l to something
  - { key: M,        mods: Control|Shift, chars: "\x1b[109;6u" } # Map shift-ctrl-m to something
  - { key: N,        mods: Control|Shift, chars: "\x33[110;6u" } # Map shift-ctrl-n to something
  - { key: O,        mods: Control|Shift, chars: "\x33[111;6u" } # Map shift-ctrl-o to something
  - { key: P,        mods: Control|Shift, chars: "\x1b[112;6u" } # Map shift-ctrl-p to something
  - { key: Q,        mods: Control|Shift, chars: "\x1b[113;6u" } # Map shift-ctrl-q to something
  - { key: R,        mods: Control|Shift, chars: "\x1b[114;6u" } # Map shift-ctrl-r to something
  - { key: S,        mods: Control|Shift, chars: "\x1b[115;6u" } # Map shift-ctrl-s to something
  - { key: T,        mods: Control|Shift, chars: "\x1b[116;6u" } # Map shift-ctrl-t to something
  - { key: U,        mods: Control|Shift, chars: "\x1b[117;6u" } # Map shift-ctrl-u to something
  - { key: V,        mods: Control|Shift, chars: "\x1b[118;6u" } # Map shift-ctrl-v to something
  - { key: W,        mods: Control|Shift, chars: "\x1b[119;6u" } # Map shift-ctrl-w to something
  - { key: X,        mods: Control|Shift, chars: "\x1b[120;6u" } # Map shift-ctrl-x to something
  - { key: Y,        mods: Control|Shift, chars: "\x1b[121;6u" } # Map shift-ctrl-y to something
  - { key: Z,        mods: Control|Shift, chars: "\x1b[122;6u" } # Map shift-ctrl-z to something
  #- { key: A,        mods: Control|Shift, chars: "\x1b[65;5u" } # Map shift-ctrl-a to something
  #- { key: B,        mods: Control|Shift, chars: "\x1b[66;5u" } # Map shift-ctrl-b to something
  #- { key: C,        mods: Control|Shift, chars: "\x1b[67;5u" } # Map shift-ctrl-c to something
  #- { key: D,        mods: Control|Shift, chars: "\x1b[68;5u" } # Map shift-ctrl-d to something
  #- { key: E,        mods: Control|Shift, chars: "\x1b[69;5u" } # Map shift-ctrl-e to something
  #- { key: F,        mods: Control|Shift, chars: "\x1b[70;5u" } # Map shift-ctrl-f to something
  #- { key: G,        mods: Control|Shift, chars: "\x1b[71;5u" } # Map shift-ctrl-g to something
  #- { key: H,        mods: Control|Shift, chars: "\x1b[72;5u" } # Map shift-ctrl-h to something
  #- { key: I,        mods: Control|Shift, chars: "\x1b[73;5u" } # Map shift-ctrl-i to something
  #- { key: J,        mods: Control|Shift, chars: "\x1b[74;5u" } # Map shift-ctrl-j to something
  #- { key: K,        mods: Control|Shift, chars: "\x1b[75;5u" } # Map shift-ctrl-k to something
  #- { key: L,        mods: Control|Shift, chars: "\x1b[76;5u" } # Map shift-ctrl-l to something
  #- { key: M,        mods: Control|Shift, chars: "\x1b[77;5u" } # Map shift-ctrl-m to something
  #- { key: N,        mods: Control|Shift, chars: "\x1b[78;5u" } # Map shift-ctrl-n to something
  #- { key: O,        mods: Control|Shift, chars: "\x1b[79;5u" } # Map shift-ctrl-o to something
  #- { key: P,        mods: Control|Shift, chars: "\x1b[80;5u" } # Map shift-ctrl-p to something
  #- { key: Q,        mods: Control|Shift, chars: "\x1b[81;5u" } # Map shift-ctrl-q to something
  #- { key: R,        mods: Control|Shift, chars: "\x1b[82;5u" } # Map shift-ctrl-r to something
  #- { key: S,        mods: Control|Shift, chars: "\x1b[83;5u" } # Map shift-ctrl-s to something
  #- { key: T,        mods: Control|Shift, chars: "\x1b[84;5u" } # Map shift-ctrl-t to something
  #- { key: U,        mods: Control|Shift, chars: "\x1b[85;5u" } # Map shift-ctrl-u to something
  #- { key: V,        mods: Control|Shift, chars: "\x1b[86;5u" } # Map shift-ctrl-v to something
  #- { key: W,        mods: Control|Shift, chars: "\x1b[87;5u" } # Map shift-ctrl-w to something
  #- { key: X,        mods: Control|Shift, chars: "\x1b[88;5u" } # Map shift-ctrl-x to something
  #- { key: Y,        mods: Control|Shift, chars: "\x1b[89;5u" } # Map shift-ctrl-y to something
  #- { key: Z,        mods: Control|Shift, chars: "\x1b[90;5u" } # Map shift-ctrl-z to something
